/*
	*** Data Viewer Widget
	*** src/gui/viewer/dataviewer.hui
	Copyright T. Youngs 2013-2019

	This file is part of Dissolve.

	Dissolve is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	Dissolve is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with Dissolve.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef DISSOLVE_DATAVIEWER_H
#define DISSOLVE_DATAVIEWER_H

#include "gui/viewer/viewer.hui"

// Forward Declarations
/* none */

// Data Viewer
class DataViewer : public BaseViewer
{
	Q_OBJECT

	public:
	// Constructor / Destructor
	DataViewer(QWidget *parent);
	~DataViewer();


	/*
	 * Rendering (BaseViewer virtuals)
	 */
	private:
	// Perform post-initialisation operations
	void postInitialiseGL();
	// Perform post-resize operations
	void postResizeGL();
	// Render 2D overlay content
	void render2DOverlay();


	/*
	 * Mouse / Keyboard Input (BaseViewer virtuals)
	 */
	protected:
	// Mouse moved
	void mouseMoved(int dx, int dy);
	// Mouse 'wheeled'
	void mouseWheeled(int delta);
	// Mouse double clicked
	void mouseDoubleClicked();
	// Context menu requested
	void contextMenuRequested(QPoint pos);
	// Key pressed
	bool keyPressed(int key);
	// Key released
	bool keyReleased(int key);

	signals:
	void currentCoordinateChanged();
	void controlAspectChanged();


	/*
	 * Interaction (BaseViewer Virtuals)
	 */
	public:
	// Interaction Mode enum
	enum InteractionMode
	{
		DefaultInteraction,
		ZoomToAreaInteraction,
		TranslateViewInteraction,
		RotateViewInteraction,
		ZoomXRangeInteraction,
		nInteractionModes
	};

	protected:
	// Start interaction
	void startInteraction();
	// End interaction
	void endInteraction();
	// Cancel current interaction
	void cancelInteraction();

	public:
	// Return text describing current interaction mode
	const char* interactionModeText() const;
	// Return clicked interaction coordinate on axis
	double clickedInteractionCoordinate();
	// Return current interaction coordinate on axis
	double currentInteractionCoordinate();


	/*
	 * Destinations
	 */
	private:
	// List of all available DataViewers that may have Renderables sent to them
	static RefList<DataViewer> renderableDestinations_;
	// Whether this DataViewer is a Renderable destination
	bool renderableDestination_;
	// Name of this renderable destination
	CharString destinationName_;

	public:
	// Set that this DataViewer should be a Renderable destination
	void enableAsRenderableDestination();
	// Set name of this renderable destination
	void setDestinationName(const char* name);
	// Return name of this renderable destination
	const char* destinationName() const;


	/*
	 * Tool Windows
	 */
// 	protected:
// 	// Axes Window
// 	AxesWindow axesWindow_;
// 	// Data Window
// 	DataWindow dataWindow_;
// 	// Style Window
// 	StyleWindow styleWindow_;
// 	// Transform Window
// 	TransformWindow transformWindow_;
// 	// View Window
// 	ViewWindow viewWindow_;
// 	// Create Renderable Dialog
// 	CreateRenderableDialog createRenderableDialog_;
// 	// Import Dialog
// 	ImportDialog importDialog_;
// 	// Fit Window
// 	EditFitKernelDialog editFitKernelDialog_;
// 	// Save Image Dialog
// 	SaveImageDialog saveImageDialog_;

	public:
// 	// Dialog enum
// 	enum DialogWindow { AxesWindow, DataWindow, StyleWindow, TransformWindow, ViewWindow, CreateRenderableDialog, ImportDialog, EditFitKernelDialog, SaveImageDialog };
// 	// Show specified window / dialog
// 	void showDialog(int window);
};

#endif
