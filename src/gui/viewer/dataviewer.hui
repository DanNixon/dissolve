/*
	*** Data Viewer Widget
	*** src/gui/viewer/dataviewer.hui
	Copyright T. Youngs 2013-2019

	This file is part of Dissolve.

	Dissolve is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	Dissolve is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with Dissolve.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef DISSOLVE_DATAVIEWER_H
#define DISSOLVE_DATAVIEWER_H

#include "gui/viewer/viewer.hui"

// Forward Declarations
/* none */

// Data Viewer
class DataViewer : public BaseViewer
{
	Q_OBJECT

	public:
	// Constructor / Destructor
	DataViewer(QWidget *parent);
	~DataViewer();


	/*
	 * Rendering (BaseViewer virtuals)
	 */
	private:
	// Perform post-initialisation operations
	void postInitialiseGL();
	// Perform post-resize operations
	void postResizeGL();
	// Render 2D overlay content
	void render2DOverlay();


	/*
	 * Mouse / Keyboard Input (BaseViewer virtuals)
	 */
	protected:
	// Mouse moved
	void mouseMoved(int dx, int dy, Qt::KeyboardModifiers modifiers);
	// Mouse 'wheeled'
	void mouseWheeled(int delta);
	// Mouse double clicked
	void mouseDoubleClicked();
	// Key pressed
	bool keyPressed(int key, Qt::KeyboardModifiers modifiers);
	// Key released
	bool keyReleased(int key, Qt::KeyboardModifiers modifiers);

	signals:
	void currentCoordinateChanged();


	/*
	 * Interaction (BaseViewer Virtuals)
	 */
	public:
	// Interaction Mode enum
	enum InteractionMode
	{
		DefaultInteraction,
		ZoomToAreaInteraction,
		TranslateViewInteraction,
		RotateViewInteraction,
		ZoomXRangeInteraction,
		nInteractionModes
	};

	private:
	// Current interaction mode
	InteractionMode interactionMode_;

	public:
	// Return current interaction mode
	int interactionMode() const;
	// Cancel current interaction
	void cancelInteraction();
	// Start interaction
	void startInteraction(Qt::KeyboardModifiers modifiers);
	// End interaction
	void endInteraction();
	// Return clicked interaction coordinate on axis
	double clickedInteractionCoordinate();
	// Return current interaction coordinate on axis
	double currentInteractionCoordinate();


	/*
	 * Tool Windows
	 */
// 	protected:
// 	// Axes Window
// 	AxesWindow axesWindow_;
// 	// Data Window
// 	DataWindow dataWindow_;
// 	// Style Window
// 	StyleWindow styleWindow_;
// 	// Transform Window
// 	TransformWindow transformWindow_;
// 	// View Window
// 	ViewWindow viewWindow_;
// 	// Create Renderable Dialog
// 	CreateRenderableDialog createRenderableDialog_;
// 	// Import Dialog
// 	ImportDialog importDialog_;
// 	// Fit Window
// 	EditFitKernelDialog editFitKernelDialog_;
// 	// Save Image Dialog
// 	SaveImageDialog saveImageDialog_;

	public:
// 	// Dialog enum
// 	enum DialogWindow { AxesWindow, DataWindow, StyleWindow, TransformWindow, ViewWindow, CreateRenderableDialog, ImportDialog, EditFitKernelDialog, SaveImageDialog };
// 	// Show specified window / dialog
// 	void showDialog(int window);


	/*
	 * I/O
	 */
	public:
	// Input File Block Keyword Enum
	enum InputBlock
	{
		EndDataViewerBlock,
		RenderableBlock,
		ViewBlock,
		nInputBlocks
	};
	// Convert text string to InputBlock
	InputBlock inputBlock(const char* s);
	// Convert InputBlock to text string
	const char* inputBlock(InputBlock id);
	// Print list of valid keywords for InputBlock specified
	void printValidKeywords(InputBlock block);

	// Axis Block Keyword Enum
	enum AxisKeyword
	{
		AutoScaleKeyword,
		AutoTicksKeyword,
		EndAxisKeyword,
		FirstTickKeyword,
		FractionalPositioningKeyword,
		GridLinesKeyword,
		GridLineMajorStyleKeyword,
		GridLineMinorStyleKeyword,
		InvertKeyword,
		LabelAnchorKeyword,
		LabelOrientationKeyword,
		LimitsKeyword,
		LogarithmicKeyword,
		MinorTicksKeyword,
		NumberFormatKeyword,
		PositionFractionalKeyword,
		PositionRealKeyword,
		StretchKeyword,
		TickDeltaKeyword,
		TickDirectionKeyword,
		TitleKeyword,
		TitleAnchorKeyword,
		TitleOrientationKeyword,
		VisibleAxisKeyword,
		nAxisKeywords
	};
	// Convert text string to AxisKeyword
	AxisKeyword axisKeyword(const char* s);
	// Convert AxisKeyword to text string
	const char* axisKeyword(AxisKeyword kwd);
	// Return minimum number of expected arguments
	int axisKeywordNArguments(AxisKeyword kwd);

	// Renderable Block Keyword Enum
	enum RenderableKeyword
	{
		ColourAlphaIsGlobalKeyword,
		ColourCustomGradientKeyword,
		ColourGlobalAlphaKeyword,
		ColourHSVGradientEndKeyword,
		ColourHSVGradientStartKeyword,
		ColourRGBGradientEndKeyword,
		ColourRGBGradientStartKeyword,
		ColourSingleKeyword,
		ColourStyleKeyword,
		EndRenderableKeyword,
		GroupKeyword,
		LineStyleKeyword,
		ShininessKeyword,
		StyleKeyword,
		TransformXKeyword,
		TransformYKeyword,
		TransformZKeyword,
		VisibleKeyword,
		nRenderableKeywords
	};
	// Convert text string to RenderableKeyword
	RenderableKeyword renderableKeyword(const char* s);
	// Convert RenderableKeyword to text string
	const char* renderableKeyword(RenderableKeyword kwd);
	// Return minimum number of expected arguments
	int renderableKeywordNArguments(RenderableKeyword kwd);

	// View Block Keyword Enum
	enum ViewKeyword
	{
		AutoFollowTypeKeyword,
		AutoPositionTitlesKeyword,
		AxisBlockKeyword,
		EndViewKeyword,
		FlatLabelsKeyword,
		LabelPointSizeKeyword,
		PerspectiveKeyword,
		RotationXKeyword,
		RotationYKeyword,
		RotationZKeyword,
		TitlePointSizeKeyword,
		TranslationKeyword,
		UseBestFlatViewKeyword,
		VerticalShiftKeyword,
		ViewTypeKeyword,
		nViewKeywords
	};
	// Convert text string to ViewKeyword
	ViewKeyword viewKeyword(const char* s);
	// Convert ViewKeyword to text string
	const char* viewKeyword(ViewKeyword kwd);
	// Return minimum number of expected arguments
	int viewKeywordNArguments(ViewKeyword kwd);

	public:
	// Read AxisBlock keywords
	bool readAxisBlock(LineParser& parser, Axes& axes, int axis, bool strictBlockEnd = true);
	// Read RenderableBlock keywords
	bool readRenderableBlock(LineParser& parser, Renderable* renderable, bool strictBlockEnd = true);
	// Read ViewBlock keywords
	bool readViewBlock(LineParser& parser, bool strictBlockEnd = true);
	// Write AxisBlock keywords
	bool writeAxisBlock(LineParser& parser, Axes& axes, int axis);
	// Write RenderableBlock keywords
	bool writeRenderableBlock(LineParser& parser, Renderable* renderable, int indentLevel = 0);
	// Write ViewBlock keywords
	bool writeViewBlock(LineParser& parser);
	
	public:
	// Parse main input blocks through specified parser
	bool parseInputBlocks(LineParser& parser);
	// Read session through parser specified
	bool readSession(LineParser& parser);
	// Write session through parser specified
	bool writeSession(LineParser& parser);
};

#endif
