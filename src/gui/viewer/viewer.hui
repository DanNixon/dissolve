/*
	*** Base Viewer Widget (subclassing QOpenGLWidget)
	*** src/gui/viewer/viewer.hui
	Copyright T. Youngs 2013-2019

	This file is part of Dissolve.

	Dissolve is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	Dissolve is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with Dissolve.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef DISSOLVE_BASEVIEWER_H
#define DISSOLVE_BASEVIEWER_H

#include "gui/viewer/render/renderable.h"
#include "gui/viewer/render/renderablegroupmanager.h"
#include "gui/viewer/render/view.h"
#include "gui/viewer/render/primitive.h"
#include "gui/viewer/render/fontinstance.h"
#include "math/data1d.h"
#include "templates/list.h"
#include "templates/reflist.h"
#include <QOpenGLWidget>
#include <QOpenGLFunctions>
#include <QOffscreenSurface>
#include <QObject>
#include <QMenu>

// Forward Declarations
/* none */

// Base rendering widget
class BaseViewer : public QOpenGLWidget, protected QOpenGLFunctions
{
	Q_OBJECT

	public:
	// Constructor / Destructor
	BaseViewer(QWidget *parent);
	~BaseViewer();


	/*
	 * Renderable Data
	 */
	protected:
	// List of renderables to display
	List<Renderable> renderables_;
	// View for renderable data
	View view_;

	public:
	// Clear existing data
	void clear();
	// Own supplied Renderable and display it
	void ownRenderable(Renderable* newRenderable);
	// Create Renderable by type and object identifier
	Renderable* createRenderable(Renderable::RenderableType type, const char* objectTag, const char* name, const char* title = NULL, const char* groupName = NULL);
	// Remove existing Renderable
	void removeRenderable(Renderable* data);
	// Clear all Renderables
	void clearRenderables();
	// Return number of Renderables
	int nRenderables() const;
	// Return list of Renderables
	const List<Renderable>& renderables() const;
	// Return named Renderable
	Renderable* renderable(const char* name) const;
	// Set visibility of named Renderable
	void setRenderableVisible(const char* name, bool visible);
	// Return visibility of named Renderable
	bool isRenderableVisible(const char* name) const;
	// Return the View definition
	View& view();


	/*
	 * Renderable Groups
	 */
	protected:
	// Group manager for Renderables
	RenderableGroupManager groupManager_;

	public:
	// Return the group manager for Renderables
	RenderableGroupManager& groupManager();


	/*
	 * Options
	 */
	private:
	// Whether Axes are visible
	bool axesVisible_;
	// Whether to apply clip planes about Axes volume for Renderables
	bool clipToAxesVolume_;

	public:
	// Set whether Axes are visible
	void setAxesVisible(bool visible);
	// Return whether Axes are visible
	bool axesVisible() const;
	// Set whether to apply clip planes about Axes volume for Renderables
	void setClipToAxesVolume(bool clip);
	// Return whether clip planes are applied about Axes volume for Renderables
	bool clipToAxesVolume() const;


	/*
	 * Rendering
	 */
	protected:
	// Width, height, and aspect ratio of the context
	GLsizei contextWidth_, contextHeight_;
	// Flag to indicate whether we may draw to the context
	bool valid_;
	// Flag indicating if we are currently drawing to this context
	bool drawing_;
	// Font instance for this viewer
	FontInstance fontInstance_;
	// Flag specifying whether we are currently rendering offscreen
	bool renderingOffScreen_;
	// Line width scaling factor to use (to adjust line width when saving images)
	double lineWidthScaling_;
	// Offscreen context
        QOpenGLContext offscreenContext_;
	// Offscreen surface
	QOffscreenSurface offscreenSurface_;

	private:
	// Initialise context widget (when created by Qt)
	void initializeGL();
	// Widget repaint
	void paintGL();
	// Resize function
	void resizeGL(int width, int height);
	// Main rendering function
	void renderGL(int xOffset = 0, int yOffset = 0);
	// Perform post-initialisation operations
	virtual void postInitialiseGL();
	// Perform post-resize operations
	virtual void postResizeGL();
	// Setup basic GL properties
	virtual void setupGL();
	// Render 2D overlay content
	virtual void render2DOverlay() = 0;
	// Set line width and text scaling to use
	void setObjectScaling(double scaling);

	protected:
	// Set and enable clip planes suitable for current axis limits and view
	void enableClipping();
	// Disable clip planes
	void disableClipping();

	public:
	// Return the current height of the drawing area
	GLsizei contextHeight() const;
	// Return the current width of the drawing area
	GLsizei contextWidth() const;
	// Set up font instance with supplied font
	bool setUpFont(const char* fontFileName = NULL);
	// Return font instance
	FontInstance& fontInstance();
	// Check for GL error
	void checkGlError();
	// Refresh widget / scene
	void postRedisplay();
	// Grab current contents of framebuffer
	QPixmap frameBuffer();
	// Render current scene at supplied size
	QPixmap generateImage(int imageWidth, int imageHeight);

	protected slots:
	// Copy current view to clipboard as an image
	void copyViewToClipboard(bool checked);


	/*
	 * Mouse / Keyboard Input
	 */
	protected:
	// Canvas coordinates of mouse down
	Vec3<int> rMouseDown_;
	// Canvas coordinates of mouse cursor
	Vec3<int> rMouseLast_;
	// Current state of mouse buttons
	Qt::MouseButtons buttonState_;
	// Modifier state on mouse down
	Qt::KeyboardModifiers mouseDownModifiers_;

	private:
	// Mouse press event
	void mousePressEvent(QMouseEvent* event);
	// Mouse release event
	void mouseReleaseEvent(QMouseEvent* event);
	// Mouse move event
	void mouseMoveEvent(QMouseEvent* event);
	// Mouse wheel event
	void wheelEvent(QWheelEvent* event);
	// Mouse double click event
	void mouseDoubleClickEvent(QMouseEvent* event);

	private slots:
	// Key press event
	void keyPressEvent(QKeyEvent*);
	// Key release event
	void keyReleaseEvent(QKeyEvent*);

	protected:
	// Mouse moved
	virtual void mouseMoved(int dx, int dy);
	// Mouse 'wheeled'
	virtual void mouseWheeled(int delta);
	// Mouse double clicked
	virtual void mouseDoubleClicked();
	// Key pressed
	virtual bool keyPressed(int key);
	// Key released
	virtual bool keyReleased(int key);


	/*
	 * Interaction
	 */
	private:
	// Clicked coordinates (in Axes frame) in 2D view
	Vec3<double> clicked2DAxesCoordinates_;
	// Current coordinates (in Axes frame) under mouse in 2D view
	Vec3<double> current2DAxesCoordinates_;

	protected:
	// Whether the viewer is currently being interacted with
	bool interacting_;
	// Current interaction mode
	int interactionMode_;

	protected:
	// Start interaction 
	virtual void startInteraction();
	// End interaction
	virtual void endInteraction();
	// Cancel current interaction
	virtual void cancelInteraction();

	public:
	// Set current interaction mode
	void setInteractionMode(int mode);
	// Return current interaction mode
	int interactionMode() const;
	// Return whether the viewer is currently being interacted with
	bool interacting() const;
	// Return clicked coordinates (in Axes frame) in 2D view
	Vec3<double> clicked2DAxesCoordinates() const;
	// Return current coordinates (in Axes frame) under mouse in 2D view
	Vec3<double> current2DAxesCoordinates() const;
	// Calculate 2D Axes coordinate from screen coordinates
	Vec3<double> screenTo2DAxes(int mouseX, int mouseY);


	/*
	 * Object Querying
	 */
	public:
	// Drawing object type
	enum ViewerObject { AxisLineObject, AxisTickLabelObject, AxisTitleLabelObject, GridLineMajorObject, GridLineMinorObject, NoObject, RenderableObject };

	protected:
	// View coordinates to probe for objects at next redraw
	int objectQueryX_, objectQueryY_;
	// Width and height of area about clicked position
	int objectQueryWidth_, objectQueryHeight_;
	// Maximum depth value found at query pixel
	GLfloat depthAtQueryCoordinates_;
	// Type of object found at query coordinates
	ViewerObject objectAtQueryCoordinates_;
	// Information describing object at query coordinates
	CharString infoAtQueryCoordinates_;

	protected:
	// Update depth at query coordinates, returning whether it is closer
	bool updateQueryDepth();
	// Set information of query object
	void setQueryObject(ViewerObject objectType, const char* info);

	public:
	// Set coordinates to query at next redraw
	void setQueryCoordinates(int mouseX, int mouseY);
	// Return object type at query coordinates
	ViewerObject objectAtQueryCoordinates() const;
	// Info for object at query coordinates
	const char* infoAtQueryCoordinates() const;
};

#endif
