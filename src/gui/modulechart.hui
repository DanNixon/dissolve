/*
	*** Module Chart
	*** src/gui/modulechart.hui
	Copyright T. Youngs 2012-2019

	This file is part of Dissolve.

	Dissolve is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	Dissolve is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with Dissolve.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef DISSOLVE_MODULECHART_H
#define DISSOLVE_MODULECHART_H

#include "gui/modulecharthotspot.h"
#include "gui/modulechartmoduleblock.h"
#include "templates/array.h"
#include "templates/list.h"
#include "templates/reflist.h"
#include <QWidget>

// Forward Declarations
class Configuration;
class DissolveWindow;
class FlowLayout;
class LineParser;
class Module;
class ModuleChartInsertionBlock;
class ModuleList;
class QDragEnterEvent;
class QDragLeaveEvent;
class QDropEvent;
class QMouseEvent;

// Module Chart - Manages display of a sequence of Modules
class ModuleChart : public QWidget
{
	Q_OBJECT

	protected:
	// Whether widget is currently refreshing
	bool refreshing_;

	public:
	// Constructor / Destructor
	ModuleChart(DissolveWindow* dissolveWindow, ModuleList& moduleList, Configuration* localConfiguration = NULL);
	virtual ~ModuleChart();

	private:
	// Pointer to DissolveWindow
	DissolveWindow* dissolveWindow_;


	/*
	 * QWidget Reimplementations
	 */
	protected:
	// Paint event
	void paintEvent(QPaintEvent* event);
	// Geometry changed
	void resizeEvent(QResizeEvent* event);
	// Size hint
	QSize sizeHint() const;
	// Minimum size hint
	QSize minimumSizeHint() const;
	// Mouse press event
	void mousePressEvent(QMouseEvent* event);
	// Mouse move event
	void mouseMoveEvent(QMouseEvent* event);
	// Mouse release event
	void mouseReleaseEvent(QMouseEvent* event);
	// Mouse double-click event
	void mouseDoubleClickEvent(QMouseEvent* event);
	// Drag enter event
	void dragEnterEvent(QDragEnterEvent* event);
	// Draw move event
	void dragMoveEvent(QDragMoveEvent* event);
	// Drag leave event
	void dragLeaveEvent(QDragLeaveEvent* event);
	// Drop event
	void dropEvent(QDropEvent* event);


	/*
	 * Drag / Drop
	 */
	private:
	// Position of last mouse click
	QPoint mouseDownPosition_;
	// Name of new Module to add (dragged from palette) if any
	QString paletteModuleToAdd_;
	// Whether a Module is currently being dragged from the palette
	bool paletteModuleDragged_;
	// ModuleChartModuleBlock being dragged (if a local drag)
	ModuleChartModuleBlock* draggedBlock_;
	// Drop hotspots avialable on the chart
	List<ModuleChartHotSpot> hotSpots_;
	// Index of the current hotspot the dragged object is over (if any)
	int currentHotSpotIndex_;

	private:
	// Return drop hotspot, if any, under specified point
	ModuleChartHotSpot* hotSpotAt(QPoint pos);
	// Reset after drop
	void resetAfterDrop(bool animateWidgets = true);


	/*
	 * Block Widgets
	 */
	private:
	// Target ModuleList
	ModuleList& modules_;
	// Parent Configuration (if we are local to one)
	Configuration* localConfiguration_;
	// Module widgets for Modules in target ModuleList
	RefList<ModuleChartModuleBlock,bool> moduleWidgets_;
	// Insertion point widget
	ModuleChartInsertionBlock* insertionWidget_;
	// List of block widgets to display, in order, in the chart
	RefList<ModuleChartBlock,ModuleChartModuleBlock*> displayBlocks_;

	private:
	// Recreate list of widgets for display, reflecting current state of widget (e.g. drag/drop etc.)
	void recreateDisplayWidgets();
	// Find ModuleChartModuleBlock displaying specified Module
	RefListItem<ModuleChartModuleBlock,bool>* moduleChartModuleBlockReference(Module* module);
	// Return the ModuleChartModuleBlock clicked on its header at the specified position (if any)
	ModuleChartModuleBlock* moduleChartModuleBlockHeaderAt(QPoint pos);

	public:
	// Update controls within widget
	void updateControls();
	// Disable sensitive controls within widget, ready for main code to run
	void disableSensitiveControls();
	// Enable sensitive controls within widget, ready for main code to run
	void enableSensitiveControls();


	/*
	 * Widget Layout
	 */
	private:
	// Spacing between widgets / extremes of chart view
	int columnSpacing_;
	// Current number of columns of widgets
	int nColumns_;
	// Current number of rows of widgets
	int nRows_;
	// Current horizontal spacing between columns / edges
	int horizontalSpacing_;
	// Current vertical spacing between rows / edges
	int verticalSpacing_;
	// Left-hand-side coordinates of columns
	Array<int> lefts_;
	// Top-side coordinates of rows
	Array<int> tops_;
	// Pixel widths of columns
	Array<int> widths_;
	// Pixel heights of rows
	Array<int> heights_;
	// Size hint for current number of columns / rows
	QSize sizeHint_;
	// Minimum size hint (for single column)
	QSize minimumSizeHint_;

	private:
	// Lay out widgets snaking horizontally
	void layOutWidgets(bool animateWidgets = false);

	public slots:
	// Recalculate layout (after widget size change etc.)
	void recalculateLayout();


	/*
	 * State I/O
	 */
	public:
	// Write widget state through specified LineParser
	bool writeState(LineParser& parser);
	// Read widget state through specified LineParser
	bool readState(LineParser& parser);
};

#endif
