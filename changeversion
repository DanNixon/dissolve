#!/bin/bash

# Change the version of the source code to the supplied value

# Day Suffix Function
DaySuffix() {
  case `date +%d` in
    1|21|31) echo "st";;
    2|22)    echo "nd";;
    3|23)    echo "rd";;
    *)       echo "th";;
  esac
}

# Check that a version information was correctly supplied
if [ "$#" -eq "0" ]
then
  echo "Checking current version numbers only..."
  TEST="true"
elif [ "$1" = "bump" ]
then
  echo "Bumping version number..."
  MAJOR=`grep 'set(VERSION_MAJOR' ./CMakeLists.txt | sed -e 's/set(VERSION_MAJOR \"\([0-9a-z\.]\+\)\")/\1/g'`
  MINOR=`grep 'set(VERSION_MINOR' ./CMakeLists.txt | sed -e 's/set(VERSION_MINOR \"\([0-9a-z\.]\+\)\")/\1/g'`
  PATCH=`grep 'set(VERSION_PATCH' ./CMakeLists.txt | sed -e 's/set(VERSION_PATCH \"\([0-9a-z\.]\+\)\")/\1/g'`
  echo "Current version is $MAJOR.$MINOR.$PATCH"
  PATCH=$(($PATCH+1))
  echo "New version will be $MAJOR.$MINOR.$PATCH"
  TEST="false"
elif [ "$#" -ne "3" ]
then
  echo "Improper version number supplied (use 'changeversion MAJOR MINOR PATCH', 'bump' to increase patch number, or no args to check existing files)"
  exit 1
else
  MAJOR=$1
  MINOR=$2
  PATCH=$3
  TEST="false"
  echo "Changing version numbers in files (to ${MAJOR}.${MINOR}.{$PATCH}..."
fi

# Program (version.h)
if [ "$TEST" = "false" ]
then
  #cp src/main/version.h src/main/version.h.orig
  sed -i -e "s/#define DISSOLVEVERSION \"[0-9\.]\+\(.*\)\"/#define DISSOLVEVERSION \"$MAJOR.$MINOR.$PATCH\"\1/g" src/version.h
fi
echo -n "       version.h (Program Version) : "
grep '#define DISSOLVEVERSION' src/version.h | sed -e 's/#define DISSOLVEVERSION "\([0-9a-z\.]\+\).*"/\1/g'


# ./CMakeLists.txt
if [ "$TEST" = "false" ]
then
  sed -i -e "s/set(VERSION_MAJOR \"\([0-9\.]\+\)\")/set(VERSION_MAJOR \"$MAJOR\")/g" -e "s/set(VERSION_MINOR \"\([0-9a-z\.]\+\)\")/set(VERSION_MINOR \"$MINOR\")/g" -e "s/set(VERSION_PATCH \"\([0-9a-z\.]\+\)\")/set(VERSION_PATCH \"$PATCH\")/g" CMakeLists.txt
fi
echo -n "  ./CMakeLists.txt (Major Version) : "
grep 'set(VERSION_MAJOR' ./CMakeLists.txt | sed -e 's/set(VERSION_MAJOR \"\([0-9a-z\.]\+\)\")/\1/g'
echo -n "                   (Minor Version) : "
grep 'set(VERSION_MINOR' ./CMakeLists.txt | sed -e 's/set(VERSION_MINOR \"\([0-9a-z\.]\+\)\")/\1/g'
echo -n "                   (Patch Version) : "
grep 'set(VERSION_PATCH' ./CMakeLists.txt | sed -e 's/set(VERSION_PATCH \"\([0-9a-z\.]\+\)\")/\1/g'


# ./configure.ac
echo -n "  ./configure.ac (Package Version) : "
if [ "$TEST" = "false" ]
then
  sed -i -e "s/m4_define(\[DISSOLVE_VERSION\],\[\([0-9a-z\.]\+\)\])/m4_define([DISSOLVE_VERSION],[$MAJOR.$MINOR.$PATCH])/g" configure.ac
fi
grep 'm4_define(\[DISSOLVE_VERSION\]' ./configure.ac | sed -e 's/m4_define(\[DISSOLVE_VERSION\],\[\([0-9a-z\.]\+\)\])/\1/g'


# Change specfile name and contents
#if [ "$TEST" = "false" ]
#then
#  echo "Writing new specfile..."
#  sed -i -e "s/Version: [0-9a-z\.]\+/Version: $MAJOR.$MINOR.$PATCH/g" extra/OpenSuSE13.2/dissolve.spec
#  grep "Version:" extra/OpenSuSE13.2/dissolve.spec
#else
#  echo -n "                          Specfile : "
#  grep "Version:" extra/OpenSuSE13.2/dissolve.spec | sed -e 's/Version: \([0-9a-z\.]\+\)/\1/g'
#fi

# Debian build files
#echo -n "       *.control (Program Version) : "
#if [ "$TEST" = "false" ]
#then
#  sed -i -e "s/Version: \([0-9a-z\.]\+\)/Version: $MAJOR.$MINOR.$PATCH/g" -e "s/^ \([a-z0-9]*\) \([0-9]*\) .*/ \1 \2 dissolve-$MAJOR.$MINOR.$PATCH.tar.gz/g" ./extra/*/control
#fi
#grep 'Version:' ./extra/*/control | sed -e 's/Version: \([0-9a-z\.]\+\)/\1/g'

# OSX build files
echo -n "dissolve.dmginfo (Program Version) : "
if [ "$TEST" = "false" ]
then
  sed -i -e "s/APP_VERSION=\"\([0-9a-z\.]\+\)\"/APP_VERSION=\"$MAJOR.$MINOR.$PATCH\"/g" ./extra/OSX/dissolve.dmginfo
fi
grep 'APP_VERSION=' ./extra/OSX/dissolve.dmginfo | sed -e 's/APP_VERSION=\"\([0-9a-z\.]\+\)\"/\1/g'

# Windows build files
if [ "$TEST" = "false" ]
then
  sed -i -e "s/#define MyAppVersion \"[0-9\.]*\"/#define MyAppVersion \"$MAJOR.$MINOR.$PATCH\"/g" -e "s/OutputBaseFilename=Dissolve-[0-9\.]*/OutputBaseFilename=Dissolve-$MAJOR.$MINOR.$PATCH/g" extra/Win32/dissolve.iss
fi
echo -n "    dissolve.iss (Program Version) : "
grep 'define MyAppVersion' extra/Win32/dissolve.iss | sed -e 's/#define MyAppVersion \"\([0-9\.]*\)\"/\1/g'
echo -n "    dissolve.iss (Output Filename) : "
grep 'OutputBaseFilename' extra/Win32/dissolve.iss | sed -e 's/OutputBaseFilename=Dissolve-\([0-9\.]*\)/\1/g'

# AppImage build files
if [ "$TEST" = "false" ]
then
  sed -i -e "s/Version=[0-9\.]*/Version=$MAJOR.$MINOR.$PATCH/g" extra/appimage/usr/share/applications/com.projectaten.Dissolve.desktop
fi
echo -n "appimage.desktop (Program Version) : "
grep 'Version=' extra/appimage/usr/share/applications/com.projectaten.Dissolve.desktop | sed -e 's/Version=\([0-9\.]*\)/\1/g'

# Documentation
if [ "$TEST" = "false" ]
then
  DAYSUFFIX=`DaySuffix`
  TODAY=`date "+%A %-d${DAYSUFFIX} %B %Y"`
  sed -i -e "s/Current Version: [0-9\.]*, \(.*\)_/Current Version: $MAJOR.$MINOR.$PATCH, ${TODAY}_/g" docs/Index.md
fi
echo -n "   Documentation (Program Version) : "
grep 'Current Version:' docs/Index.md | sed -e 's/.*Version: \([0-9\.]*\),.*/\1/g'
echo -n "              Documentation (Date) : "
grep 'Current Version:' docs/Index.md | sed -e "s/.*Version: .*, \(.*\)_/\1/g"

exit 0

