----
TODO
----

o Dynamic load-balancing when running Configurations in parallel - assess time taken to go through all steps and adjust overall repeats relative to other Configurations.
o Allow for Fixed atoms:
	- Checks for fixed Atoms with GrainDefinitions - this should not be allowed since a Grain will be mobile.
	- Provision for pre-calculation of RDF/F(Q) data between fixed atoms, and introduction of this into final RDF/F(Q) data for speed?
o Accumulate timing information for each module, displaying averages and total in schedule at each step?
o Establish proper limit for switching between RDF calculation methods
o Rework Configuration::setup() to account for all types of initailisation - random config, loaded coordinates, or loaded atoms/coordinates/connectivity.
o Adding intramolecular connections with Configuration::addBond(), for instance, only adds involved Atoms to Atom exclusion list, whereas strictly-speaking we should exclude 1-3 and scale 1-4 interactions, even if there is no explicit potential term defined across those atoms.

-------------------------------------------
Ideas / Notes / Weird Algorithm Suggestions
-------------------------------------------

** Position Restraints
o Simple fixed atoms can be implemented with a 'frozen' flag in the Atom. Harmonic (or other) position restraints can be implemented as a separate thing, with local lists on Atoms and a master list in the Configuration.

** Partial MD
o Allow specific Species types to be targetted in MD, in effect temporarily freezing all other atoms, but allowing all atoms within the Species molecule(s) to relax.
o Indivdiual molecules could be treated with 'rough' MD, only taking account of atoms in immediate neighbour cells, and would be useful after making drastic changes to intramolecular terms.

** Directional MC Moves
Could allow definition of displacement vectors (based on molecular axes) for species, and have a module which attempts MC moves along those vectors.

** Averaging of Calculated Partials
Options in Partials module to allow either stacking and averaging of RDFs (requiring additional storage inside PartialSet) or blending of current calculated values with previous values in some percentage (easier, but real, actual partials are unavailable). Can use the moduleData() lists and store datasets to be averaged as additional data.

** Allow Chemical Units When Specifying Quantities
If density for specific Isotopologues can be provided, we can allow gram quantities of them to be added (in Partials/Spatials definitions, for instance) and converted automatically to relative molar amounts (which is what we need). Will need to set a tolerance on the resulting relative populations between species for this method, since we need to ensure some kind of consistency between the exact, specified composition of the Configuration(s) and the Sample information.

** Monte Carlo 'Velocity'
Keep track of last successful rotation / translation for each Grain, allowing similar moves to be attempted on next round? Reset if move fails.

** Configuration Branching
Above a certain threshold of r-squared, or at certain time intervals, 'big events' could occur which radically change the structure of the system. For instance, large molecule flips / rotations / exchanges. Standard energetic criteria would normally disallow such moves, but a 'big event' could unequivocally accept all such moves and progress the system back to an equilibrium, at which point the goodness of fit would be recalculated and compared against those previously stored.  We would maintain a history of branch points, storing the model coordinates at these points so that we can revert back to the previous best if necessary. Perhaps it is possible to track the r-squared value and predict its value at some future point if we keep progressing down a particular branch.

** Zero-Point Disorder
For fixed atoms, can zero-point disorder be modelled effectively by introducing a random fluctuation to the particle's coordinates each time they are retrieved (a la Simplex SA)?

** Cycles
Can store whether a Bond is involved in a cycle in the actual Bond structure, meaning randomisation / shake moves can be made accordingly. If such flags are present, can we just ignore bonds in the cycle when it comes to shakes and invent a 'ring' potential, which defines the maximum deviation of atoms from the general plane of the ring? 

** Cache Misses
At the start of a Cell-based loop calculation, is it worthwhile copying all neighbouring cell data to a local Grain array, and trying to avoid cache misses? AKS mentioned before that this seemed to be beneficial. Worth trying. May work better with, for instance, larger nShakesPerGrain in GrainShake. Adapt ChangeStore to automatically create list of Grains in Cell neighbours ready for calculation? Would also work well for Molecule-based loops.

** Atom Type 'Applicability'
For an alkane, for instance, the pairpotential for the terminal H may be different from the methylene H - to what extent does this affect the possible fit?  WOuld be nice to refine a system with one potential for all H, then split into CH3 and CH2 potentials to find out.

** Potential Library
Keep standard (i.e. already fitted) potentials available for standard solvents etc.
